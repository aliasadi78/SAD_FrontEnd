{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\AliAsadi\\\\Desktop\\\\SAD_FrontEnd\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport debounce from '../utils/debounce';\nimport useForkRef from '../utils/useForkRef';\nimport useEnhancedEffect from '../utils/useEnhancedEffect';\nimport ownerWindow from '../utils/ownerWindow';\n\nfunction getStyleValue(computedStyle, property) {\n  return parseInt(computedStyle[property], 10) || 0;\n}\n\nvar styles = {\n  /* Styles applied to the shadow textarea element. */\n  shadow: {\n    // Visibility needed to hide the extra text area on iPads\n    visibility: 'hidden',\n    // Remove from the content flow\n    position: 'absolute',\n    // Ignore the scrollbar width\n    overflow: 'hidden',\n    height: 0,\n    top: 0,\n    left: 0,\n    // Create a new layer, increase the isolation of the computed values\n    transform: 'translateZ(0)'\n  }\n};\nvar TextareaAutosize = /*#__PURE__*/React.forwardRef(function TextareaAutosize(props, ref) {\n  var onChange = props.onChange,\n      maxRows = props.maxRows,\n      _props$minRows = props.minRows,\n      minRows = _props$minRows === void 0 ? 1 : _props$minRows,\n      style = props.style,\n      value = props.value,\n      other = _objectWithoutPropertiesLoose(props, [\"onChange\", \"maxRows\", \"minRows\", \"style\", \"value\"]);\n\n  var _React$useRef = React.useRef(value != null),\n      isControlled = _React$useRef.current;\n\n  var inputRef = React.useRef(null);\n  var handleRef = useForkRef(ref, inputRef);\n  var shadowRef = React.useRef(null);\n  var renders = React.useRef(0);\n\n  var _React$useState = React.useState({}),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      state = _React$useState2[0],\n      setState = _React$useState2[1];\n\n  var syncHeight = React.useCallback(function () {\n    var input = inputRef.current;\n    var containerWindow = ownerWindow(input);\n    var computedStyle = containerWindow.getComputedStyle(input);\n    var inputShallow = shadowRef.current;\n    inputShallow.style.width = computedStyle.width;\n    inputShallow.value = input.value || props.placeholder || 'x';\n\n    if (inputShallow.value.slice(-1) === '\\n') {\n      // Certain fonts which overflow the line height will cause the textarea\n      // to report a different scrollHeight depending on whether the last line\n      // is empty. Make it non-empty to avoid this issue.\n      inputShallow.value += ' ';\n    }\n\n    var boxSizing = computedStyle['box-sizing'];\n    var padding = getStyleValue(computedStyle, 'padding-bottom') + getStyleValue(computedStyle, 'padding-top');\n    var border = getStyleValue(computedStyle, 'border-bottom-width') + getStyleValue(computedStyle, 'border-top-width'); // The height of the inner content\n\n    var innerHeight = inputShallow.scrollHeight - padding; // Measure height of a textarea with a single row\n\n    inputShallow.value = 'x';\n    var singleRowHeight = inputShallow.scrollHeight - padding; // The height of the outer content\n\n    var outerHeight = innerHeight;\n\n    if (minRows) {\n      outerHeight = Math.max(Number(minRows) * singleRowHeight, outerHeight);\n    }\n\n    if (maxRows) {\n      outerHeight = Math.min(Number(maxRows) * singleRowHeight, outerHeight);\n    }\n\n    outerHeight = Math.max(outerHeight, singleRowHeight); // Take the box sizing into account for applying this value as a style.\n\n    var outerHeightStyle = outerHeight + (boxSizing === 'border-box' ? padding + border : 0);\n    var overflow = Math.abs(outerHeight - innerHeight) <= 1;\n    setState(function (prevState) {\n      // Need a large enough difference to update the height.\n      // This prevents infinite rendering loop.\n      if (renders.current < 20 && (outerHeightStyle > 0 && Math.abs((prevState.outerHeightStyle || 0) - outerHeightStyle) > 1 || prevState.overflow !== overflow)) {\n        renders.current += 1;\n        return {\n          overflow: overflow,\n          outerHeightStyle: outerHeightStyle\n        };\n      }\n\n      if (process.env.NODE_ENV !== 'production') {\n        if (renders.current === 20) {\n          console.error(['Material-UI: Too many re-renders. The layout is unstable.', 'TextareaAutosize limits the number of renders to prevent an infinite loop.'].join('\\n'));\n        }\n      }\n\n      return prevState;\n    });\n  }, [maxRows, minRows, props.placeholder]);\n  React.useEffect(function () {\n    var handleResize = debounce(function () {\n      renders.current = 0;\n      syncHeight();\n    });\n    var containerWindow = ownerWindow(inputRef.current);\n    containerWindow.addEventListener('resize', handleResize);\n    return function () {\n      handleResize.clear();\n      containerWindow.removeEventListener('resize', handleResize);\n    };\n  }, [syncHeight]);\n  useEnhancedEffect(function () {\n    syncHeight();\n  });\n  React.useEffect(function () {\n    renders.current = 0;\n  }, [value]);\n\n  var handleChange = function handleChange(event) {\n    renders.current = 0;\n\n    if (!isControlled) {\n      syncHeight();\n    }\n\n    if (onChange) {\n      onChange(event);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"textarea\", _extends({\n    value: value,\n    onChange: handleChange,\n    ref: handleRef // Apply the rows prop to get a \"correct\" first SSR paint\n    ,\n    rows: minRows,\n    style: _extends({\n      height: state.outerHeightStyle,\n      // Need a large enough difference to allow scrolling.\n      // This prevents infinite rendering loop.\n      overflow: state.overflow ? 'hidden' : null\n    }, style)\n  }, other)), /*#__PURE__*/React.createElement(\"textarea\", {\n    \"aria-hidden\": true,\n    className: props.className,\n    readOnly: true,\n    ref: shadowRef,\n    tabIndex: -1,\n    style: _extends({}, styles.shadow, style)\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? TextareaAutosize.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * Maximum number of rows to display.\n   */\n  maxRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * Minimum number of rows to display.\n   * @default 1\n   */\n  minRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * @ignore\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  placeholder: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  style: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  value: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.string), PropTypes.number, PropTypes.string])\n} : void 0;\nexport default TextareaAutosize;","map":{"version":3,"sources":["C:/Users/AliAsadi/Desktop/SAD_FrontEnd/node_modules/@material-ui/core/TextareaAutosize/TextareaAutosize.js"],"names":["_extends","_objectWithoutPropertiesLoose","React","PropTypes","debounce","useForkRef","useEnhancedEffect","ownerWindow","getStyleValue","computedStyle","property","parseInt","styles","shadow","visibility","position","overflow","height","top","left","transform","TextareaAutosize","forwardRef","props","ref","onChange","maxRows","minRows","style","value","other","useRef","isControlled","current","inputRef","handleRef","shadowRef","renders","useState","state","setState","syncHeight","useCallback","input","containerWindow","getComputedStyle","inputShallow","width","placeholder","slice","boxSizing","padding","border","innerHeight","scrollHeight","singleRowHeight","outerHeight","Math","max","Number","min","outerHeightStyle","abs","prevState","process","env","NODE_ENV","console","error","join","useEffect","handleResize","addEventListener","clear","removeEventListener","handleChange","event","createElement","Fragment","rows","className","readOnly","tabIndex","propTypes","string","oneOfType","number","func","object","arrayOf"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport debounce from '../utils/debounce';\nimport useForkRef from '../utils/useForkRef';\nimport useEnhancedEffect from '../utils/useEnhancedEffect';\nimport ownerWindow from '../utils/ownerWindow';\n\nfunction getStyleValue(computedStyle, property) {\n  return parseInt(computedStyle[property], 10) || 0;\n}\n\nconst styles = {\n  /* Styles applied to the shadow textarea element. */\n  shadow: {\n    // Visibility needed to hide the extra text area on iPads\n    visibility: 'hidden',\n    // Remove from the content flow\n    position: 'absolute',\n    // Ignore the scrollbar width\n    overflow: 'hidden',\n    height: 0,\n    top: 0,\n    left: 0,\n    // Create a new layer, increase the isolation of the computed values\n    transform: 'translateZ(0)'\n  }\n};\nconst TextareaAutosize = /*#__PURE__*/React.forwardRef(function TextareaAutosize(props, ref) {\n  const {\n    onChange,\n    maxRows,\n    minRows = 1,\n    style,\n    value\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, [\"onChange\", \"maxRows\", \"minRows\", \"style\", \"value\"]);\n\n  const {\n    current: isControlled\n  } = React.useRef(value != null);\n  const inputRef = React.useRef(null);\n  const handleRef = useForkRef(ref, inputRef);\n  const shadowRef = React.useRef(null);\n  const renders = React.useRef(0);\n  const [state, setState] = React.useState({});\n  const syncHeight = React.useCallback(() => {\n    const input = inputRef.current;\n    const containerWindow = ownerWindow(input);\n    const computedStyle = containerWindow.getComputedStyle(input);\n    const inputShallow = shadowRef.current;\n    inputShallow.style.width = computedStyle.width;\n    inputShallow.value = input.value || props.placeholder || 'x';\n\n    if (inputShallow.value.slice(-1) === '\\n') {\n      // Certain fonts which overflow the line height will cause the textarea\n      // to report a different scrollHeight depending on whether the last line\n      // is empty. Make it non-empty to avoid this issue.\n      inputShallow.value += ' ';\n    }\n\n    const boxSizing = computedStyle['box-sizing'];\n    const padding = getStyleValue(computedStyle, 'padding-bottom') + getStyleValue(computedStyle, 'padding-top');\n    const border = getStyleValue(computedStyle, 'border-bottom-width') + getStyleValue(computedStyle, 'border-top-width'); // The height of the inner content\n\n    const innerHeight = inputShallow.scrollHeight - padding; // Measure height of a textarea with a single row\n\n    inputShallow.value = 'x';\n    const singleRowHeight = inputShallow.scrollHeight - padding; // The height of the outer content\n\n    let outerHeight = innerHeight;\n\n    if (minRows) {\n      outerHeight = Math.max(Number(minRows) * singleRowHeight, outerHeight);\n    }\n\n    if (maxRows) {\n      outerHeight = Math.min(Number(maxRows) * singleRowHeight, outerHeight);\n    }\n\n    outerHeight = Math.max(outerHeight, singleRowHeight); // Take the box sizing into account for applying this value as a style.\n\n    const outerHeightStyle = outerHeight + (boxSizing === 'border-box' ? padding + border : 0);\n    const overflow = Math.abs(outerHeight - innerHeight) <= 1;\n    setState(prevState => {\n      // Need a large enough difference to update the height.\n      // This prevents infinite rendering loop.\n      if (renders.current < 20 && (outerHeightStyle > 0 && Math.abs((prevState.outerHeightStyle || 0) - outerHeightStyle) > 1 || prevState.overflow !== overflow)) {\n        renders.current += 1;\n        return {\n          overflow,\n          outerHeightStyle\n        };\n      }\n\n      if (process.env.NODE_ENV !== 'production') {\n        if (renders.current === 20) {\n          console.error(['Material-UI: Too many re-renders. The layout is unstable.', 'TextareaAutosize limits the number of renders to prevent an infinite loop.'].join('\\n'));\n        }\n      }\n\n      return prevState;\n    });\n  }, [maxRows, minRows, props.placeholder]);\n  React.useEffect(() => {\n    const handleResize = debounce(() => {\n      renders.current = 0;\n      syncHeight();\n    });\n    const containerWindow = ownerWindow(inputRef.current);\n    containerWindow.addEventListener('resize', handleResize);\n    return () => {\n      handleResize.clear();\n      containerWindow.removeEventListener('resize', handleResize);\n    };\n  }, [syncHeight]);\n  useEnhancedEffect(() => {\n    syncHeight();\n  });\n  React.useEffect(() => {\n    renders.current = 0;\n  }, [value]);\n\n  const handleChange = event => {\n    renders.current = 0;\n\n    if (!isControlled) {\n      syncHeight();\n    }\n\n    if (onChange) {\n      onChange(event);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"textarea\", _extends({\n    value: value,\n    onChange: handleChange,\n    ref: handleRef // Apply the rows prop to get a \"correct\" first SSR paint\n    ,\n    rows: minRows,\n    style: _extends({\n      height: state.outerHeightStyle,\n      // Need a large enough difference to allow scrolling.\n      // This prevents infinite rendering loop.\n      overflow: state.overflow ? 'hidden' : null\n    }, style)\n  }, other)), /*#__PURE__*/React.createElement(\"textarea\", {\n    \"aria-hidden\": true,\n    className: props.className,\n    readOnly: true,\n    ref: shadowRef,\n    tabIndex: -1,\n    style: _extends({}, styles.shadow, style)\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? TextareaAutosize.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * Maximum number of rows to display.\n   */\n  maxRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * Minimum number of rows to display.\n   * @default 1\n   */\n  minRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * @ignore\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  placeholder: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  style: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  value: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.string), PropTypes.number, PropTypes.string])\n} : void 0;\nexport default TextareaAutosize;"]},"metadata":{},"sourceType":"module"}